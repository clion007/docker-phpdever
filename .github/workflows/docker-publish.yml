name: Phpdever Docker Image Publish

on:
  workflow_dispatch:
    inputs:
      PHP_VERSION:
        required: false
        type: string
        description: 'The php stable version ("X.Y.Z")'
      COMPOSER_VERSION:
        required: false
        type: string
        description: 'The composer stable version ("X.Y.Z")'
  repository_dispatch:

jobs:
  Phpdever_Publish:
    runs-on: ubuntu-latest
    name: Publish Phpdever Image

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get latest versions
      id: getVersion
      run: |
        if [ -z ${{ inputs.PHP_VERSION }} ]; then
          PHP_VERSION=$(wget -qO- -t1 -T2 https://www.php.net/downloads.php | grep "Changelog" | awk 'NR==1 {print}' | awk '{printf $2}')
        else
          PHP_VERSION=${{ inputs.PHP_VERSION }}
        fi
        echo "PhpdeverVersion=$PHP_VERSION" >> $GITHUB_OUTPUT
        if [ -z ${{ inputs.COMPOSER_VERSION }} ]; then
          COMPOSER_VERSION=$(wget -qO- -t1 -T2 https://getcomposer.org/ | grep "Latest" | awk -F ">" '{printf $3}' | awk -F "<" '{printf $1}')
        else
          COMPOSER_VERSION=${{ inputs.COMPOSER_VERSION }}
        fi
        echo "composerVersion=$COMPOSER_VERSION" >> $GITHUB_OUTPUT
     
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Login to AliYun Registry
      uses: docker/login-action@v3
      with:
        registry: registry.cn-chengdu.aliyuncs.com
        username: ${{ secrets.ALIYUN_USER }}
        password: ${{ secrets.ALIYUN_TOKEN }}

    - name: Build and Push Docker images
      id: build
      uses: docker/build-push-action@v5
      with:
        file: Dockerfile
        context: .
        push: true
        build-args: |
          # DOTNET_VERSION=${{ steps.getVersion.outputs.dotnetVersion }}
          COMPOSER_VERSION=${{ steps.getVersion.outputs.composerVersion }}
          PHP_VERSION=${{ steps.getVersion.outputs.PhpdeverVersion }}
        tags: |
          clion007/Phpdever:latest
          clion007/Phpdever:${{ steps.getVersion.outputs.PhpdeverVersion }}
          registry.cn-chengdu.aliyuncs.com/clion/Phpdever:latest
          registry.cn-chengdu.aliyuncs.com/clion/Phpdever:${{ steps.getVersion.outputs.PhpdeverVersion }}

    - name: Get Release Body
      id: getBody
      if: steps.build.outcome == 'success'
      run: |
        # CHANGES=$(curl -fsSL https://github.com/Phpdever/Phpdever/releases/latest | grep "<li>" | sed '/<li>$/d')
        # BODYINFO="<h3>Changes</h3><ul>${CHANGES}</ul>"
        BODYINFO="Changes for details can view in offical link https://github.com/Phpdever/Phpdever/releases/latest"
        # echo "BodyInfo<<EOF" >> $GITHUB_OUTPUT
        # echo "$BODYINFO" >> $GITHUB_OUTPUT
        # echo "EOF" >> $GITHUB_OUTPUT
        echo "BodyInfo=$BODYINFO" >> $GITHUB_OUTPUT
      
    - name: Publish Release
      if: steps.build.outcome == 'success'
      uses: ncipollo/release-action@v1
      with:
        name: Phpdever Server v${{ steps.getVersion.outputs.PhpdeverVersion }}
        tag: v${{ steps.getVersion.outputs.PhpdeverVersion }}
        body: ${{ steps.getBody.outputs.BodyInfo }}
        skipIfReleaseExists: true
        
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 2
