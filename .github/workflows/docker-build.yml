name: Build PHP Developer Docker Image

on:
  workflow_dispatch:
    inputs:
      php_version:
        description: 'PHP版本 (例如: 7.4, 8.0, 8.1, 8.2，留空则使用最新版本)'
        required: false
      composer_version:
        description: 'Composer版本 (例如: 2.5.8，留空则使用最新版本)'
        required: false
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
      - 'root/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 检查是否提供了手动版本
            id: check_inputs
            run: |
              if [ ! -z "${{ github.event.inputs.php_version }}" ]; then
                echo "USE_MANUAL_PHP=true" >> $GITHUB_OUTPUT
                echo "PHP_VERSION=${{ github.event.inputs.php_version }}" >> $GITHUB_ENV
                echo "使用手动指定的PHP版本: ${{ github.event.inputs.php_version }}"
              else
                echo "USE_MANUAL_PHP=false" >> $GITHUB_OUTPUT
              fi
              
              if [ ! -z "${{ github.event.inputs.composer_version }}" ]; then
                echo "USE_MANUAL_COMPOSER=true" >> $GITHUB_OUTPUT
                echo "COMPOSER_VERSION=${{ github.event.inputs.composer_version }}" >> $GITHUB_ENV
                echo "使用手动指定的Composer版本: ${{ github.event.inputs.composer_version }}"
              else
                echo "USE_MANUAL_COMPOSER=false" >> $GITHUB_OUTPUT
              fi
      - name: 获取最新PHP版本
        if: steps.check_inputs.outputs.USE_MANUAL_PHP != 'true'
        id: php_version
        run: |
          LATEST_PHP_VERSION=$(curl -s https://www.php.net/releases/index.php | grep -oP 'PHP \K[0-9]+\.[0-9]+' | sort -V | tail -1)
          echo "PHP_VERSION=${LATEST_PHP_VERSION}" >> $GITHUB_ENV
          echo "获取到最新PHP版本: ${LATEST_PHP_VERSION}"

      - name: 获取最新Composer版本
        if: steps.check_inputs.outputs.USE_MANUAL_COMPOSER != 'true'
        id: composer_version
        run: |
          LATEST_COMPOSER_VERSION=$(curl -s https://api.github.com/repos/composer/composer/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "COMPOSER_VERSION=${LATEST_COMPOSER_VERSION}" >> $GITHUB_ENV
          echo "获取到最新Composer版本: ${LATEST_COMPOSER_VERSION}"

      - name: 使用手动输入的版本(如果提供)
        run: |
          if [ ! -z "${{ github.event.inputs.php_version }}" ]; then
            echo "PHP_VERSION=${{ github.event.inputs.php_version }}" >> $GITHUB_ENV
            echo "使用手动指定的PHP版本: ${{ github.event.inputs.php_version }}"
          fi
          
          if [ ! -z "${{ github.event.inputs.composer_version }}" ]; then
            echo "COMPOSER_VERSION=${{ github.event.inputs.composer_version }}" >> $GITHUB_ENV
            echo "使用手动指定的Composer版本: ${{ github.event.inputs.composer_version }}"
          fi

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登录到Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            clion007/phpdever:php${{ env.PHP_VERSION }}
            clion007/phpdever:latest
          build-args: |
            PHP_VERSION=${{ env.PHP_VERSION }}
            COMPOSER_VERSION=${{ env.COMPOSER_VERSION }}