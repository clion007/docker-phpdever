name: Phpdever Docker Image Publish

on:
  workflow_dispatch:
    inputs:
      PHP_VERSION:
        required: false
        type: string
        description: 'PHP版本 (例如: 8.1.31, 留空则获取最新版本)'
      COMPOSER_VERSION:
        required: false
        type: string
        description: 'Composer版本 (例如: 2.5.8, 留空则获取最新版本)'
  repository_dispatch:
    types: [build_image]

jobs:
  Phpdever_Publish:
    runs-on: ubuntu-latest
    name: Publish Phpdever Image
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Get latest versions
      id: getVersion
      run: |
        # 添加错误处理函数
        handle_error() {
          echo "Error: $1"
          exit 1
        }

        if [ -z "${{ inputs.PHP_VERSION }}" ]; then
          # 从下载页面获取最新PHP版本
          PHP_LATEST=$(curl -sS https://www.php.net/downloads.php | grep -o 'PHP [0-9]\+\.[0-9]\+\.[0-9]\+' | head -n1 | cut -d' ' -f2) || handle_error "获取PHP版本失败"
          [ -z "$PHP_LATEST" ] && handle_error "无法获取PHP最新版本信息"
          PHP_VERSION=$PHP_LATEST
        else
          PHP_VERSION=${{ inputs.PHP_VERSION }}
        fi
        
        if [ -z "${{ inputs.COMPOSER_VERSION }}" ]; then
          # 使用纯shell命令获取Composer最新版本
          COMPOSER_VERSION=$(curl -sS https://api.github.com/repos/composer/composer/releases/latest | grep -oP '"tag_name": *"\K[^"]*') || handle_error "获取Composer版本失败"
          [ -z "$COMPOSER_VERSION" ] && handle_error "无法获取Composer最新版本信息"
        else
          COMPOSER_VERSION=${{ inputs.COMPOSER_VERSION }}
        fi
        
        # 输出版本信息
        echo "PhpVersion=$PHP_VERSION" >> $GITHUB_OUTPUT
        echo "ComposerVersion=$COMPOSER_VERSION" >> $GITHUB_OUTPUT
        echo "使用PHP版本: $PHP_VERSION"
        echo "使用Composer版本: $COMPOSER_VERSION"
     
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Login to AliYun Registry
      uses: docker/login-action@v3
      with:
        registry: registry.cn-chengdu.aliyuncs.com
        username: ${{ secrets.ALIYUN_USER }}
        password: ${{ secrets.ALIYUN_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: registry.cn-chengdu.aliyuncs.com/clion/phpdever

    - name: Build and Push Docker images
      id: build
      uses: docker/build-push-action@v6
      with:
        file: Dockerfile
        context: .
        push: true
        build-args: |
          COMPOSER_VERSION=${{ steps.getVersion.outputs.ComposerVersion }}
          PHP_VERSION=${{ steps.getVersion.outputs.PhpVersion }}
        tags: |
          clion007/phpdever:latest
          clion007/phpdever:php${{ steps.getVersion.outputs.PhpVersion }}
          registry.cn-chengdu.aliyuncs.com/clion/phpdever:latest
          registry.cn-chengdu.aliyuncs.com/clion/phpdever:php${{ steps.getVersion.outputs.PhpVersion }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Build Release Body
      id: getBody
      if: steps.build.outcome == 'success'
      run: |
        BODYINFO="Changes for detail can view in offical link https://www.php.net/ChangeLog-$(echo ${{ steps.getVersion.outputs.PhpVersion }} | awk -F "." '{printf $1"."$2}').php and https://getcomposer.org/changelog/${{ steps.getVersion.outputs.ComposerVersion }}"
        echo "BodyInfo=$BODYINFO" >> $GITHUB_OUTPUT
      
    - name: Publish Release
      if: steps.build.outcome == 'success'
      uses: ncipollo/release-action@v1
      with:
        name: Phpdever v${{ steps.getVersion.outputs.PhpVersion }}
        tag: v${{ steps.getVersion.outputs.PhpVersion }}
        body: ${{ steps.getBody.outputs.BodyInfo }}
        skipIfReleaseExists: true
        
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 2
